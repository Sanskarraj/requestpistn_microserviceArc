package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"log"

)

type File struct {
	Name    string `json:"name"`
	Content string `json:"content"`
}

type TestCase struct {
	Input   [][]int `json:"input"`
	Targets []int   `json:"targets"`
}

type ExecuteRequest struct {
	Language           string   `json:"language"`
	Version            string   `json:"version"`
	Files              []File   `json:"files"`
	Stdin              string   `json:"stdin"`
	Args               []string `json:"args"`
	CompileTimeout     int      `json:"compile_timeout"`
	RunTimeout         int      `json:"run_timeout"`
	CompileMemoryLimit int      `json:"compile_memory_limit"`
	RunMemoryLimit     int      `json:"run_memory_limit"`
}

func main() {

	originalJSON := `{
		"input": [
		  [2, 7, 11, 15, 20, 30, 40, 50, 60, 80, 90, 100, 120, 130, 140, 150],
		  [3, 2, 4, 8, 16, 23, 42, 58, 71, 84, 99, 101, 113, 127, 135, 149, 160],
		  [1, 5, 5, 2, 9, 14, 28, 33, 41, 56, 73, 89, 100, 105, 117, 124, 137, 141]
		],
		"targets": [220, 236, 200]
	  }`

	var testCase TestCase
	err := json.Unmarshal([]byte(originalJSON), &testCase)
	if err != nil {
		log.Fatalf("Error unmarshalling JSON: %v", err)
	}

	// Marshal the `input` part back into JSON
	Input1, err := json.Marshal(testCase.Input)
	if err != nil {
		log.Fatalf("Error marshalling input to JSON: %v", err)
	}

	// Marshal the `targets` part back into JSON
	Input2, err := json.Marshal(testCase.Targets)
	if err != nil {
		log.Fatalf("Error marshalling targets to JSON: %v", err)
	}

	// Print the separate JSON strings
	// fmt.Println("jsonInput1:", string(jsonInput1))
	// fmt.Println("jsonInput2:", string(jsonInput2))
	
	// jsonInput1 := `
	// 		[
	// 			[2, 7, 11, 15],
	// 			[3, 2, 4],
	// 			[1, 5, 5],
	// 			[1, 2, 3, 4, 5],
	// 			[5, 3, 5, 7]
	// 		]
	// `
	// jsonInput2:=`[9, 6, 10, 8, 10]`
	
    jsonInput1 := string(Input1)
	jsonInput2 := string(Input2)
	





	language := "c++"
	version := "10.2.0"
header:=	`#include <iostream>
#include <vector>
#include <unordered_map>
#include <chrono>
#include <algorithm>
using namespace std;`

func_code:=`vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> numMap;
    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];
        if (numMap.find(complement) != numMap.end()) {
            return {numMap[complement], i};
        }
        numMap[nums[i]] = i;
    }
    return {};
}`
complexity_func:=
`pair<double, size_t> calculateComplexity(vector<int>& nums, int target) {
    auto start = chrono::high_resolution_clock::now();
    
    vector<int> result = twoSum(nums, target);
    
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double, std::milli> duration = end - start;
    
    // Time complexity (in milliseconds)
    double timeComplexity = duration.count();
    
    // Space complexity (in bytes)
    size_t spaceComplexity = sizeof(int) * nums.size() + sizeof(unordered_map<int, int>);
    
    return {timeComplexity, spaceComplexity};
}


int main() {`

testcase:=converterCplusplus(jsonInput1,0)+ converterCplusplus(jsonInput2,1)
    // vector<vector<int>> num = {
    //     {2, 7, 11, 15},
    //     {3, 2, 4},
    //     {1, 5, 5},
    //     {1, 2, 3, 4, 5},
    //     {5, 3, 5, 7}
    // };

    // vector<int> targets = {9, 6, 10, 8, 10};


main_code:=`
    vector<vector<int>> res;
    vector<pair<double, size_t>> complexities;

    for (size_t i = 0; i < nums.size(); ++i) {
        int target = targets[i];
        auto [timeComplexity, spaceComplexity] = calculateComplexity(nums[i], target);
        complexities.push_back({timeComplexity, spaceComplexity});
        
        vector<int> result = twoSum(nums[i], target);
        res.push_back(result);
        
        cout << "Test case " << i + 1 << ":\n";
        cout << "Input: num = [";
        for (size_t j = 0; j < nums[i].size(); ++j) {
            cout << nums[i][j];
            if (j < nums[i].size() - 1) cout << ",";
        }
        cout << "], target = " << target << "\n";
        
        cout << "Output: [";
        for (size_t j = 0; j < result.size(); ++j) {
            cout << result[j];
            if (j < result.size() - 1) cout << ",";
        }
        cout << "]\n";
        
        cout << "Time complexity: " << timeComplexity << " ms\n";
        cout << "Space complexity: " << spaceComplexity << " bytes\n\n";
    }

    return 0;
}`













	code := header + func_code +complexity_func+ testcase+ main_code

	// Initialize args (if needed)
	args := []string{}

	// Create the JSON request payload
	requestPayload := ExecuteRequest{
		Language:           language,
		Version:            version,
		Files:              []File{{Name: "two_sum.cpp", Content: code}},
		Stdin:              "",
		Args:               args,
		CompileTimeout:     10000,
		RunTimeout:         3000,
		CompileMemoryLimit: -1,
		RunMemoryLimit:     -1,
	}

	// Convert to JSON
	jsonData, err := json.Marshal(requestPayload)
	if err != nil {
		fmt.Println("Error marshalling JSON:", err)
		return
	}

	// Print the JSON payload
	fmt.Println("Generated JSON:")
	fmt.Println(string(jsonData))

	// Send the POST request
	resp, err := http.Post("http://localhost:2000/api/v2/execute", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Read the response
	var responseBody bytes.Buffer
	responseBody.ReadFrom(resp.Body)
	fmt.Println("Response from server:")
	fmt.Println(responseBody.String())
}



////-----------------------------------------------C++  ----------------------------------------------------------------------------


// formatToCppVector converts a JSON structure to a C++ vector string representation
func formatToCppVector(data interface{}) string {
	switch v := data.(type) {
	case []interface{}:
		elements := make([]string, len(v))
		for i, elem := range v {
			elements[i] = formatToCppVector(elem)
		}
		return fmt.Sprintf("{%s}", strings.Join(elements, ", "))
	case string:
		return fmt.Sprintf("\"%s\"", v)
	case float64:
		if v == float64(int(v)) {
			return fmt.Sprintf("%d", int(v))
		}
		return fmt.Sprintf("%g", v)
	default:
		return fmt.Sprintf("%v", v)
	}
}

// getVectorType determines the C++ vector type based on the content
func getVectorType(data interface{}) string {
	switch v := data.(type) {
	case []interface{}:
		if len(v) == 0 {
			return "auto"
		}
		innerType := getVectorType(v[0])
		if strings.HasPrefix(innerType, "std::vector") {
			return fmt.Sprintf("std::vector<%s>", innerType)
		}
		return fmt.Sprintf("std::vector<%s>", innerType)
	case string:
		return "std::string"
	case float64:
		return "int"
	}
	return "auto"
}

// parseAndCleanJSON removes outer curly braces and parses the JSON input
func parseAndCleanJSON(jsonInput string) (interface{}, error) {
	// Remove the outer curly braces and any whitespace
	jsonInput = strings.TrimSpace(jsonInput)
	jsonInput = strings.TrimPrefix(jsonInput, "{")
	jsonInput = strings.TrimSuffix(jsonInput, "}")
	jsonInput = strings.TrimSpace(jsonInput)

	var data interface{}
	if err := json.Unmarshal([]byte(jsonInput), &data); err != nil {
		return nil, err
	}
	return data, nil
}

// converterCplusplus converts a JSON string to a C++ vector representation
func converterCplusplus(input string,i int ) string {
	data, err := parseAndCleanJSON(input)
	if err != nil {
		fmt.Printf("Error decoding JSON: %v\n", err)
		return ""
	}

	name := "nums"
	if(i ==1){name="targets"}

	vectorType := getVectorType(data)
	result := fmt.Sprintf("%s%s%s%s", vectorType,name,formatToCppVector(data),";")
	return result
}

// func main() {
// 	// Corrected JSON input (should not have outer curly braces)
// 	jsonInput := `[
// 			[
// 				"abc",
// 				"def",
// 				"ghi",
// 				"jklmn",
// 				"opqrstuv"
// 			],
// 			[
// 				"abc",
// 				"def",
// 				"ghi",
// 				"jklmn",
// 				"opqrstuv"
// 			]
// 	]`

// 	result := converterCplusplus(jsonInput)
// 	fmt.Println(result)
// }

////-----------------------------------------------C++  ----------------------------------------------------------------------------
